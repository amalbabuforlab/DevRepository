{
	"name": "CopyPipeline_ul3",
	"properties": {
		"activities": [
			{
				"name": "Copy_ul3",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 3,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [
					{
						"name": "Source",
						"value": "FlightsAndWeather/"
					},
					{
						"name": "Destination",
						"value": "sparkcontainer/FlightsAndWeather/@{formatDateTime(pipeline().parameters.windowStart,'yyyy')}/@{formatDateTime(pipeline().parameters.windowStart,'MM')}/FlightsAndWeather.csv"
					}
				],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "FileServerReadSettings",
							"recursive": true,
							"wildcardFileName": "*",
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings",
							"skipLineCount": 0
						}
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobStorageWriteSettings",
							"copyBehavior": "MergeFiles"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"parallelCopies": 10,
					"enableSkipIncompatibleRow": true,
					"validateDataConsistency": false
				},
				"inputs": [
					{
						"referenceName": "SourceDataset_ul3",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "DestinationDataset_ul3",
						"type": "DatasetReference",
						"parameters": {
							"cw_folderPath": "FlightsAndWeather/@{formatDateTime(pipeline().parameters.windowStart,'yyyy')}/@{formatDateTime(pipeline().parameters.windowStart,'MM')}"
						}
					}
				]
			}
		],
		"parameters": {
			"windowStart": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2023-01-04T06:55:52Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}